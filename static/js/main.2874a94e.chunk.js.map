{"version":3,"sources":["Components/Editor.js","Components/Preview.js","Components/Toolbar.js","App.js","index.js"],"names":["Editor","props","id","onChange","type","value","markdown","marked","setOptions","breaks","renderer","Renderer","link","href","title","text","Preview","dangerouslySetInnerHTML","__html","Toolbar","className","icon","onClick","App","handleChange","event","setState","target","handleEditorMaximize","editorMaximized","state","handlePreviewMaximize","previewMaximized","placeholder","classes","this","Component","ReactDOM","render","document","getElementById"],"mappings":"mQAceA,G,MAXA,SAACC,GACZ,OACI,8BACIC,GAAG,SACHC,SAAUF,EAAME,SAChBC,KAAK,OACLC,MAAOJ,EAAMK,a,gBCLzBC,IAAOC,WAAW,CACdC,QAAQ,IAIZ,IAAMC,EAAW,IAAIH,IAAOI,SAC5BD,EAASE,KAAO,SAAUC,EAAMC,EAAOC,GACnC,MAAM,4BAAN,OAAmCF,EAAnC,aAA4CE,EAA5C,UAIJ,IAWeC,EAXC,SAACf,GACb,OACI,yBACIgB,wBAAyB,CACrBC,OAAQX,IAAON,EAAMK,SAAU,CAAEI,SAAUA,KAE/CR,GAAG,aCRAiB,EAVC,SAAClB,GACb,OACI,yBAAKmB,UAAU,WACX,uBAAGA,UAAU,uBAAuBN,MAAM,sBACzCb,EAAMc,KACP,uBAAGK,UAAWnB,EAAMoB,KAAMC,QAASrB,EAAMqB,YCF/CC,E,YACJ,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAgBRuB,aAAe,SAACC,GACd,EAAKC,SAAS,CACZpB,SAAUmB,EAAME,OAAOtB,SAnBR,EAuBnBuB,qBAAuB,WACrB,EAAKF,SAAS,CACZG,iBAAkB,EAAKC,MAAMD,mBAzBd,EA6BnBE,sBAAwB,WACtB,EAAKL,SAAS,CACZM,kBAAmB,EAAKF,MAAME,oBA3BhC,EAAKF,MAAQ,CACXxB,SAAU2B,EACVJ,iBAAiB,EACjBG,kBAAkB,GAPH,E,sEAqCjB,IAAME,EAAUC,KAAKL,MAAMD,gBACvB,CAAC,uBAAwB,mBAAoB,kBAC7CM,KAAKL,MAAME,iBACT,CAAC,kBAAmB,wBAAyB,kBAC7C,CAAC,aAAc,cAAe,oBAEpC,OACE,6BACE,yBAAKZ,UAAWc,EAAQ,IACtB,kBAAC,EAAD,CACEb,KAAMa,EAAQ,GACdZ,QAASa,KAAKP,qBACdb,KAAK,WAEP,kBAAC,EAAD,CACET,SAAU6B,KAAKL,MAAMxB,SACrBH,SAAUgC,KAAKX,gBAGnB,yBAAKJ,UAAU,aAAf,OACA,yBAAKA,UAAWc,EAAQ,IACtB,kBAAC,EAAD,CACEb,KAAMa,EAAQ,GACdZ,QAASa,KAAKJ,sBACdhB,KAAK,cACP,kBAAC,EAAD,CACET,SAAU6B,KAAKL,MAAMxB,iB,GAhEf8B,aA0EZH,EAAW,wqCA+CFV,IC1Hfc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.2874a94e.chunk.js","sourcesContent":["import React from 'react';\n\n// Editor Component\nconst Editor = (props) => {\n    return (\n        <textarea\n            id='editor'\n            onChange={props.onChange}\n            type='text'\n            value={props.markdown}\n        />\n    );\n}\n\nexport default Editor;\n","import React from 'react';\nimport marked from 'marked';\n\n// Allow linebreaks in the marked module\nmarked.setOptions({\n    breaks: true\n});\n\n// Create a renderer and make links add a _blank target\nconst renderer = new marked.Renderer();\nrenderer.link = function (href, title, text) {\n    return `<a target=\"_blank\" href=\"${href}\">${text} </a>`;\n};\n\n// Preview Component\nconst Preview = (props) => {\n    return (\n        <div\n            dangerouslySetInnerHTML={{\n                __html: marked(props.markdown, { renderer: renderer })\n            }}\n            id='preview'\n        />\n    );\n}\n\nexport default Preview;","import React from 'react';\n\n// Toolbar for both editor and preview use\nconst Toolbar = (props) => {\n    return (\n        <div className='toolbar'>\n            <i className='fa fa-free-code-camp' title='no-stack-dub-sack' />\n            {props.text}\n            <i className={props.icon} onClick={props.onClick} />\n        </div>\n    );\n};\n\nexport default Toolbar;","import React, { Component } from 'react';\nimport './App.css';\n\n// Import components\nimport { Toolbar, Editor, Preview } from './Components';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // Set initial state\n    this.state = {\n      markdown: placeholder,\n      editorMaximized: false,\n      previewMaximized: false\n    }\n\n    // no binding needed since arrow functions are used\n    // this.handleChange = this.handleChange.bind(this);\n    // this.handleEditorMaximize = this.handleEditorMaximize.bind(this);\n    // this.handlePreviewMaximize = this.handlePreviewMaximize.bind(this);\n  }\n\n  // Update the input that should be formated\n  handleChange = (event) => {\n    this.setState({\n      markdown: event.target.value\n    });\n  }\n\n  handleEditorMaximize = () => {\n    this.setState({\n      editorMaximized: !this.state.editorMaximized\n    });\n  }\n\n  handlePreviewMaximize = () => {\n    this.setState({\n      previewMaximized: !this.state.previewMaximized\n    });\n  }\n\n  render() {\n    // classes being filled with tertiary operator, to apply the correct styles for maximized editor/preview\n    const classes = this.state.editorMaximized\n      ? ['editorWrap maximized', 'previewWrap hide', 'fa fa-compress']    // editor maximized\n      : this.state.previewMaximized\n        ? ['editorWrap hide', 'previewWrap maximized', 'fa fa-compress']  // preview maximized\n        : ['editorWrap', 'previewWrap', 'fa fa-arrows-alt'];              // nothing maximized\n\n    return (\n      <div>\n        <div className={classes[0]}>\n          <Toolbar\n            icon={classes[2]}\n            onClick={this.handleEditorMaximize}\n            text='Editor'\n          />\n          <Editor\n            markdown={this.state.markdown}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className='converter'>vvv</div>\n        <div className={classes[1]}>\n          <Toolbar\n            icon={classes[2]}\n            onClick={this.handlePreviewMaximize}\n            text='Previewer' />\n          <Preview\n            markdown={this.state.markdown}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\n// Placeholder for instant preview when opening the site\n// Taken from the example at FreeCodeCamp\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}